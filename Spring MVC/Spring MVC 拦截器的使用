	在开发一个网站时可能有这样的需求：某些页面只希望几个特定的用户浏览。对于这样的访问权限控制，应该如何实现呢？拦截器就可以实现上述需求。在 Struts 2 框架中，拦截器是其重要的组成部分，Spring MVC 框架也提供了拦截器功能。

	Spring MVC 的拦截器（Interceptor）与 Java Servlet 的过滤器（Filter）类似，它主要用于拦截用户的请求并做相应的处理，通常应用在权限验证、记录请求信息的日志、判断用户是否登录等功能上。
	拦截器的定义
	在 Spring MVC 框架中定义一个拦截器需要对拦截器进行定义和配置，定义一个拦截器可以通过两种方式：一种是通过实现 HandlerInterceptor 接口或继承 HandlerInterceptor 接口的实现类来定义；另一种是通过实现 WebRequestInterceptor 接口或继承 WebRequestInterceptor 接口的实现类来定义。

	本节以实现 HandlerInterceptor 接口的定义方式为例讲解自定义拦截器的使用方法。示例代码如下：
	package interceptor;
	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;
	import org.springframework.web.servlet.HandlerInterceptor;
	import org.springframework.web.servlet.ModelAndView;
	public class TestInterceptor implements HandlerInterceptor {
		@Override
		public void afterCompletion(HttpServletRequest request,
				HttpServletResponse response, Object handler, Exception ex)
				throws Exception {
			System.out.println("afterCompletion方法在控制器的处理请求方法执行完成后执行，即视图渲染结束之后执行");
		}
		@Override
		public void postHandle(HttpServletRequest request,
				HttpServletResponse response, Object handler,
				ModelAndView modelAndView) throws Exception {
			System.out.println("postHandle方法在控制器的处理请求方法调用之后，解析视图之前执行");
		}
		@Override
		public boolean preHandle(HttpServletRequest request,
				HttpServletResponse response, Object handler) throws Exception {
			System.out.println("preHandle方法在控制器的处理请求方法调用之后，解析视图之前执行");
			return false;
		}
	}
	在上述拦截器的定义中实现了 HandlerInterceptor 接口，并实现了接口中的 3 个方法。有关这 3 个方法的描述如下。
	preHandle 方法：该方法在控制器的处理请求方法前执行，其返回值表示是否中断后续操作，返回 true 表示继续向下执行，返回 false 表示中断后续操作。
	postHandle 方法：该方法在控制器的处理请求方法调用之后、解析视图之前执行，可以通过此方法对请求域中的模型和视图做进一步的修改。
	afterCompletion 方法：该方法在控制器的处理请求方法执行完成后执行，即视图渲染结束后执行，可以通过此方法实现一些资源清理、记录日志信息等工作。
	拦截器的配置
	让自定义的拦截器生效需要在 Spring MVC 的配置文件中进行配置，配置示例代码如下：
	<!-- 配置拦截器 -->
	<mvc:interceptors>
		<!-- 配置一个全局拦截器，拦截所有请求 -->
		<bean class="interceptor.TestInterceptor" /> 
		<mvc:interceptor>
			<!-- 配置拦截器作用的路径 -->
			<mvc:mapping path="/**" />
			<!-- 配置不需要拦截作用的路径 -->
			<mvc:exclude-mapping path="" />
			<!-- 定义<mvc:interceptor>元素中，表示匹配指定路径的请求才进行拦截 -->
			<bean class="interceptor.Interceptor1" />
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 配置拦截器作用的路径 -->
			<mvc:mapping path="/gotoTest" />
			<!-- 定义在<mvc: interceptor>元素中，表示匹配指定路径的请求才进行拦截 -->
			<bean class="interceptor.Interceptor2" />
		</mvc:interceptor>
	</mvc:interceptors>
	在上述示例代码中，<mvc：interceptors> 元素用于配置一组拦截器，其子元素 <bean> 定义的是全局拦截器，即拦截所有的请求。

	<mvc：interceptor> 元素中定义的是指定路径的拦截器，其子元素 <mvc：mapping> 用于配置拦截器作用的路径，该路径在其属性 path 中定义。

	如上述示例代码中，path 的属性值“/**”表示拦截所有路径，“/gotoTest”表示拦截所有以“/gotoTest”结尾的路径。如果在请求路径中包含不需要拦截的内容，可以通过 <mvc：exclude-mapping> 子元素进行配置。

	需要注意的是，<mvc：interceptor> 元素的子元素必须按照 <mvc：mapping.../>、<mvc：exclude-mapping.../>、<bean.../> 的顺序配置。

	-------------------------------------------------------------------------------------------------------------------------
	单个拦截器的执行流程
	在配置文件中如果只定义了一个拦截器，程序将首先执行拦截器类中的 preHandle 方法，如果该方法返回 true，程序将继续执行控制器中处理请求的方法，否则中断执行。如果 preHandle 方法返回 true，并且控制器中处理请求的方法执行后、返回视图前将执行 postHandle 方法，返回视图后才执行 afterCompletion 方法。

	下面通过一个应用 springMVCDemo06 演示拦截器的执行流程，具体步骤如下：
	1）创建应用
	创建一个名为 springMVCDemo06 的 Web 应用，并将 Spring MVC 相关的 JAR 包复制到 lib 目录中。
	2）创建 web.xml
	在 WEB-INF 目录下创建 web.xml 文件，该文件中的配置信息如下：
	<?xml version="1.0" encoding="UTF-8"?>
	<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns="http://java.sun.com/xml/ns/javaee" 
		xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" 
		xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">
		<!--配置DispatcherServlet-->
		<servlet>
			<servlet-name>springmvc</servlet-name>
			<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
		</servlet>
		<servlet-mapping>
			<servlet-name>springmvc</servlet-name>
			<url-pattern>/</url-pattern>
		</servlet-mapping>
	</web-app>
	3）创建控制器类
	在 src 目录下创建一个名为 controller 的包，并在该包中创建控制器类 Interceptor Controller，代码如下：
	package Controller;
	import org.springframework.stereotype.Controller;
	import org.springframework.web.bind.annotation.RequestMapping;
	@Controller
	public class InterceptorController {
		@RequestMapping("/gotoTest")
		public String gotoTest() {
			System.out.println("正在测试拦截器，执行控制器的处理请求方法中");
			return "test";
		}
	}
	4）创建拦截器类
	在 src 目录下创建一个名为 interceptor 的包，并在该包中创建拦截器类 TestInterceptor，代码与《拦截器的配置和使用》教程中的示例代码相同。
	5）创建配置文件 springmvc-servlet.xml
	在 WEB-INF 目录下创建配置文件 springmvc-servlet.xml，代码如下：
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xmlns:p="http://www.springframework.org/schema/p" 
		xmlns:context="http://www.springframework.org/schema/context"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/mvc
			http://www.springframework.org/schema/mvc/spring-mvc.xsd">
		<!-- 使用扫描机制扫描控制器类 -->
		<context:component-scan base-package="controller" />
		<!-- 配置视图解析器 -->
		<bean
			class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="prefix" value="/WEB-INF/jsp/" />
			<property name="suffix" value=".jsp" />
		</bean>
		<!-- 配置拦截器 -->
		<mvc:interceptors>
			<!-- 配置一个全局拦截器，拦截所有请求 -->
			<bean class="interceptor.TestInterceptor" />
		</mvc:interceptors>
	</beans>
	6）创建视图 JSP 文件
	在 WEB-INF 目录下创建一个 jsp 文件夹，并在该文件夹中创建一个 JSP 文件 test.jsp，代码如下：
	<%@ page language="java" contentType="text/html; charset=UTF-8"
		pageEncoding="UTF-8"%>
	<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
	<html>
	<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Insert title here</title>
	</head>
	<body>
		视图
		<%System.out.println("视图渲染结束。"); %>
	</body>
	</html>
	7）测试拦截器
	首先将 springMVCDemo06 应用发布到 Tomcat 服务器，并启动 Tomcat 服务器，然后通过地址“http://localhost:8080/springMVCDemo06/gotoTest”测试拦截器。程序正确执行后控制台的输出结果如图 1 所示。

	单个拦截器的执行过程
	图 1  单个拦截器的执行过程
	多个拦截器的执行流程
	在 Web 应用中通常需要有多个拦截器同时工作，这时它们的 preHandle 方法将按照配置文件中拦截器的配置顺序执行，而它们的 postHandle 方法和 afterCompletion 方法则按照配置顺序的反序执行。

	下面通过修改“单个拦截器的执行流程”小节的 springMVCDemo06 应用来演示多个拦截器的执行流程，具体步骤如下：
	1）创建多个拦截器
	在 springMVCDemo06 应用的 interceptor 包中创建两个拦截器类 Interceptor1 和 Interceptor2。
	package interceptor;
	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;
	import org.springframework.web.servlet.HandlerInterceptor;
	import org.springframework.web.servlet.ModelAndView;
	public class Interceptor1 implements HandlerInterceptor {
		public boolean preHandle(HttpServletRequest request,
				HttpServletResponse response, Object handler) throws Exception {
			System.out.println("Interceptor preHandle 方法执行");
			/** 返回true表示继续向下执行，返回false表示中断后续的操作 */
			return true;
		}
		@Override
		public void postHandle(HttpServletRequest request,
				HttpServletResponse response, Object handler,
				ModelAndView modelAndView) throws Exception {
			System.out.println("Interceptor1 postHandle 方法执行");
		}
		@Override
		public void afterCompletion(HttpServletRequest request,
				HttpServletResponse response, Object handler, Exception ex)
				throws Exception {
			System.out.println("Interceptor1 afterCompletion 方法执行");
		}
	}
	Interceptor2 类的代码如下：
	package interceptor;
	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;
	import org.springframework.web.servlet.HandlerInterceptor;
	import org.springframework.web.servlet.ModelAndView;
	public class Interceptor2 implements HandlerInterceptor {
		public boolean preHandle(HttpServletRequest request,
				HttpServletResponse response, Object handler) throws Exception {
			System.out.println("Interceptor2 preHandle 方法执行");
			/** 返回true表示继续向下执行，返回false表示中断后续的操作 */
			return true;
		}
		@Override
		public void postHandle(HttpServletRequest request,
				HttpServletResponse response, Object handler,
				ModelAndView modelAndView) throws Exception {
			System.out.println("Interceptor2 postHandle 方法执行");
		}
		@Override
		public void afterCompletion(HttpServletRequest request,
				HttpServletResponse response, Object handler, Exception ex)
				throws Exception {
			System.out.println("Interceptor2 afterCompletion 方法执行");
		}
	}
	2）配置拦截器
	在配置文件 springmvc-servlet.xml 中的 <mvc：interceptors> 元素内配置两个拦截器 Interceptor1 和 Interceptor2，配置代码如下：
	<mvc:interceptors>
		<!-- 配置一个全局拦截器，拦截所有请求 -->
		<!--<bean class="interceptor.TestInterceptor" />-->
		<mvc:interceptor>
			<!-- 配置拦截器作用的路径 -->
			<mvc:mapping path="/**"/>
			<!--定义在<mvc:interceptor>元素中，表示匹配指定路径的请求才进行拦截-->
			<bean class="interceptor.Interceptor1"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 配置拦截器作用的路径 -->
			<mvc:mapping path="/gotoTest"/>
			<!--定义在<mvc:interceptor>元素中，表示匹配指定路径的请求才进行拦截-->
			<bean class="interceptor.Interceptor2"/>
		</mvc:interceptor>
	</mvc:interceptors>
